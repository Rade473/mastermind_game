require_relative 'instructions.rb'
class Mastermind

include Instructions
@@colors = {
  '1' => BLUE1,
  '2' => BROWN2,
  '3' => CYAN3,
  '4' => MAGENTA4,
  '5' => GREEN5,
  '6' => RED6
}
  def initialize
    @player_choice = []
    @clues = []
    @player_guess = []
    @human_code = false
    @human_break = false
    @computer_code = []
    @rounds = 0
    
    human_or_computer()
    display_colors()
    if @human_code then
      start_game_human_coder()
    end
    if @human_break then
      start_game_human_breaker()
    end
  end

  def human_or_computer
    while game_mode_input = gets.chomp.to_i 
    case game_mode_input
    when 1 
      @human_code = true
      puts "You are now the code MAKER"
      break
    when 2
      @human_break = true
      puts "You are now the code BREAKER"
      break
    else
      puts "Invalid input. Please try again, use 1 or 2"
      print '> '
    end 
    end
  end

  def display_colors
    puts ALLCOLORS
  end

  def start_game_human_coder
    Computer.new
  end

  def start_game_human_breaker
    @computer_code = 4.times.map{ Random.rand(1..6) }
    puts "Secret code has been generated by the computer, please enter your guess" 
    puts "with 4 numbers between 1-6"
    print '> '
# For debugging
# p @computer_code
    player_choice()
  end

  def player_choice
    puts "You have #{12 - @rounds} tries left"
    while userinput = gets.chomp.split('')
      if userinput.length == 4 && userinput.all? {|input| @@colors.include?(input)}
        puts 'Your choice:'
        @player_choice.replace(userinput)
        @rounds += 1
        break
      else
        puts "Invalid input"
        print '> '
      end
    end
    display_player_choice(@player_choice)
    check_for_clues(@player_choice, @computer_code)
  end

  def display_player_choice(input)
    @player_guess = []
    input.each{
    |e| @player_guess.push(@@colors[e])
    }
    puts @player_guess.map { |e| "#{e}"}.join(' ')
  end

  def check_for_clues(playerinput,code)
    #Creates 2 remporary arrays, to check against game rules of matching numbers
    temporary_player_input = playerinput.dup
    temporary_player_input.map!(&:to_i)
    temporary_code = code.dup 
    temporary_player_input.each_with_index do |_choice, i|
      if temporary_player_input[i] == temporary_code [i]
        @clues << COLOREDCLUE
        temporary_player_input[i] = 0
        temporary_code[i] = 10
      end
    end
    temporary_code.each do |n|
      if temporary_player_input.include?(n)
        @clues << NONCOLOREDCLUE
      end
    end
     puts 'Clues:'
     puts @clues.sort.map { |e| "#{e}"}.join('')
     @clues = []
     check_win_or_lose()
     player_choice()
  end

 

  def check_win_or_lose
    if @player_choice.map(&:to_i) == @computer_code
      puts "Congratulations you win"
      new_game()
    end
    if @rounds >= 13
      puts "You are out of tries"
      puts "Unfortunately you lose"
      puts "Secret code was #{@computer_code}"
      new_game()
    end
  end

  def new_game
    puts 'Would you like to play a new game, please type y or n'
    while input = gets.chomp
    case input
    when 'y'
    puts "Would you like to be the code MAKER or code BREAKER?"
    puts "Press '1' to be the code MAKER"
    puts "Press '2' to be the code BREAKER"
        Mastermind.new
        break
    when 'n'
        exit
    else 
        puts "Invalid input"
        print '> '
      end
    end
  end

end